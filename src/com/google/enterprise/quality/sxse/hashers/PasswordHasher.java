// Copyright 2009 Google Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.enterprise.quality.sxse.hashers;


import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * A hasher for passwords that uses salt. The actual hash computation is
 * performed by the {@link Hasher} instance passed into the constructor. Before
 * invoking {@link #hash(String)}, salt must be randomly generated by invoking
 * {@link #newSalt(int)} or assigned by invoking {@link #setSalt(byte[])}.
 */
public class PasswordHasher {
  private static final Logger logger = Logger.getLogger(
      PasswordHasher.class.getName());

  private static final String SECURE_ALGORITHM = "SHA1PRNG";
  private static Random saltGenerator;

  private final Hasher hasher;
  private byte[] salt;

  static {
    try {
      saltGenerator = SecureRandom.getInstance(SECURE_ALGORITHM);
    } catch (NoSuchAlgorithmException e) {
      logger.log(Level.WARNING, "salt will be generated by an insecure RNG", e);
      saltGenerator = new Random();
    }
  }

  /**
   * Creates a new password hasher with no salt set or created.
   * 
   * @param hasher the underlying hasher for passwords
   */
  public PasswordHasher(Hasher hasher) {
    this.hasher = hasher;
  }

  /**
   * Sets the salt to use when hashing passwords.
   * 
   * @param salt the salt
   */
  public void setSalt(byte[] salt) {
    this.salt = (salt != null) ? salt.clone() : null;
  }

  /**
   * Creates new salt of the given size.
   * 
   * @param saltSize the number of bytes of salt to use
   */
  public void newSalt(int saltSize) {
    salt = new byte[saltSize];
    saltGenerator.nextBytes(salt);
  }

  /**
   * @return a copy of the salt
   */
  public byte[] getSalt() {
    return (salt != null) ? salt.clone() : null;
  }

  /**
   * Returns the salted hash of the given password.
   * 
   * @param password the password to hash
   * @return the salted hash
   * @throws IllegalStateException if no salt has been created or set
   */
  public byte[] hash(String password) throws IllegalStateException {
    if (salt == null) {
      throw new IllegalStateException("No salt for hash exists");
    }

    hasher.update(salt);
    hasher.update(password.getBytes());
    return hasher.finish();
  }
}
